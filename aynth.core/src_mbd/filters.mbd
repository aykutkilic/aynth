module filters imports synth_elems, clibs, modulators, ring_buffer { 
  exported component lp_filter extends nothing { 
    provides i_audio_loop_elem audio_loop 
    provides i_ctrl_loop_elem ctrl_loop 
     
    requires i_audio audio_in 
    provides i_audio audio_out 
    requires i_synth_state synth_state 
     
    requires i_modulation cutoff_mod 
    requires i_modulation res_mod 
     
    double x1 = 0; 
    double x2 = 0; 
    double y1 = 0; 
    double y2 = 0; 
    double a0; 
    double a1; 
    double a2; 
    double b1; 
    double b2; 
     
    void init() <= on init { 
      init_ring_buffer(&audio_out.rb, 512); 
    } runnable init 
     
    void on_audio_loop_prepare(uint32 count) <= op audio_loop.on_audio_loop_prepare { 
      double avg = 0; 
      for (i ++ in [0..count[) { 
        double in = single_read_ring_buffer(&audio_in.rb, i); 
        double out = a0 * in + a1 * x1 + a2 * x2 - b1 * y1 + b2 * y2; 
        if (out > 1) { 
          out = 1; 
        } else if ( out < -1 ) { 
          out = -1; 
        } 
         
        x2 = x1; 
        x1 = in; 
        y2 = y1; 
        y1 = out; 
        single_write_ring_buffer(&audio_out.rb, i, out); 
        avg += y1; 
      } for 
    } runnable on_audio_loop_prepare 
     
    void on_audio_loop_finalize(uint32 count) <= op audio_loop.on_audio_loop_finalize { 
      shift_ring_buffer(&audio_out.rb, count); 
    } runnable on_audio_loop_finalize 
     
    void ctrl_loop_on_ctrl_loop() <= op ctrl_loop.on_ctrl_loop { 
      double cutoff = 2.0 * cutoff_mod.out / synth_state.sample_rate; 
      double res = pow(10.0, 0.05 * -res_mod.out); 
      double k = 0.5 * res * sin(M_PI * cutoff); 
      double c1 = 0.5 * (1 - k) / (1 + k); 
      double c2 = (0.5 + c1) * cos(M_PI * cutoff); 
      double c3 = (0.5 + c1 - c2) * 0.25; 
      a0 = 2 * c3; 
      a1 = 2 * 2 * c3; 
      a2 = 2 * c3; 
      b1 = 2 * -c2; 
      b2 = 2 * c1; 
    } runnable ctrl_loop_on_ctrl_loop 
  } component lp_filter 
}